
HAL_PARKING_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b24  08004b24  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b2c  08004b2c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b2c  08004b2c  00005b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000674  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c78d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d14  00000000  00000000  00012819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00014530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6d  00000000  00000000  00015290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021682  00000000  00000000  00015cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001037e  00000000  00000000  0003737f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc068  00000000  00000000  000476fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113765  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003de4  00000000  00000000  001137a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0011758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004330 	.word	0x08004330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004330 	.word	0x08004330

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t distance, last_distance;
uint32_t sensor_time;
char data[20];
void delay_us(uint32_t us) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <delay_us+0x2c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	@ 0x24
   while (__HAL_TIM_GET_COUNTER(&htim2)<us );
 8000570:	bf00      	nop
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <delay_us+0x2c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	d8f9      	bhi.n	8000572 <delay_us+0x12>
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	200000cc 	.word	0x200000cc

08000590 <read_hcsr04>:

uint16_t read_hcsr04()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2180      	movs	r1, #128	@ 0x80
 800059e:	4813      	ldr	r0, [pc, #76]	@ (80005ec <read_hcsr04+0x5c>)
 80005a0:	f001 f9de 	bl	8001960 <HAL_GPIO_WritePin>
	delay_us(10);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f7ff ffdb 	bl	8000560 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	480f      	ldr	r0, [pc, #60]	@ (80005ec <read_hcsr04+0x5c>)
 80005b0:	f001 f9d6 	bl	8001960 <HAL_GPIO_WritePin>

	while((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))==GPIO_PIN_RESET);
 80005b4:	bf00      	nop
 80005b6:	2140      	movs	r1, #64	@ 0x40
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <read_hcsr04+0x5c>)
 80005ba:	f001 f9b9 	bl	8001930 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f8      	beq.n	80005b6 <read_hcsr04+0x26>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80005c4:	e005      	b.n	80005d2 <read_hcsr04+0x42>
	{
		local_time++;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3301      	adds	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
		delay_us(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff ffc7 	bl	8000560 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <read_hcsr04+0x5c>)
 80005d6:	f001 f9ab 	bl	8001930 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1f2      	bne.n	80005c6 <read_hcsr04+0x36>
	}
	return local_time;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	b29b      	uxth	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <display>:

void display(uint16_t dist)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]

	  if(last_distance!= dist)
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <display+0x8c>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	88fa      	ldrh	r2, [r7, #6]
 8000600:	429a      	cmp	r2, r3
 8000602:	d020      	beq.n	8000646 <display+0x56>
	  {
	  ssd1306_SetCursor(71, 20);
 8000604:	2114      	movs	r1, #20
 8000606:	2047      	movs	r0, #71	@ 0x47
 8000608:	f000 fe30 	bl	800126c <ssd1306_SetCursor>
	  ssd1306_WriteString("    ", Font_7x10, Black);
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <display+0x90>)
 800060e:	2200      	movs	r2, #0
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000614:	481b      	ldr	r0, [pc, #108]	@ (8000684 <display+0x94>)
 8000616:	f000 fe03 	bl	8001220 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800061a:	f000 fcf5 	bl	8001008 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(1, 20);
 800061e:	2114      	movs	r1, #20
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fe23 	bl	800126c <ssd1306_SetCursor>
	  sprintf(data, "Distance: %u",dist);
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	461a      	mov	r2, r3
 800062a:	4917      	ldr	r1, [pc, #92]	@ (8000688 <display+0x98>)
 800062c:	4817      	ldr	r0, [pc, #92]	@ (800068c <display+0x9c>)
 800062e:	f003 f9df 	bl	80039f0 <siprintf>
	  ssd1306_WriteString(data, Font_7x10, Black);
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <display+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	9200      	str	r2, [sp, #0]
 8000638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800063a:	4814      	ldr	r0, [pc, #80]	@ (800068c <display+0x9c>)
 800063c:	f000 fdf0 	bl	8001220 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000640:	f000 fce2 	bl	8001008 <ssd1306_UpdateScreen>
 8000644:	e012      	b.n	800066c <display+0x7c>
	  }
	  else
	  {
		  ssd1306_SetCursor(1, 20);
 8000646:	2114      	movs	r1, #20
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fe0f 	bl	800126c <ssd1306_SetCursor>
		  sprintf(data, "Distance: %u",dist);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	461a      	mov	r2, r3
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <display+0x98>)
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <display+0x9c>)
 8000656:	f003 f9cb 	bl	80039f0 <siprintf>
		  ssd1306_WriteString(data, Font_7x10, Black);
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <display+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	9200      	str	r2, [sp, #0]
 8000660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000662:	480a      	ldr	r0, [pc, #40]	@ (800068c <display+0x9c>)
 8000664:	f000 fddc 	bl	8001220 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000668:	f000 fcce 	bl	8001008 <ssd1306_UpdateScreen>
	  }
	  last_distance= dist;
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <display+0x8c>)
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	8013      	strh	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000015e 	.word	0x2000015e
 8000680:	08004ae4 	.word	0x08004ae4
 8000684:	08004348 	.word	0x08004348
 8000688:	08004350 	.word	0x08004350
 800068c:	20000164 	.word	0x20000164

08000690 <map_frequency>:

float map_frequency(uint16_t value, float in_min, float in_max, float out_min, float out_max) {
 8000690:	b480      	push	{r7}
 8000692:	b089      	sub	sp, #36	@ 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	ed87 0a04 	vstr	s0, [r7, #16]
 800069c:	edc7 0a03 	vstr	s1, [r7, #12]
 80006a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80006a4:	edc7 1a01 	vstr	s3, [r7, #4]
 80006a8:	82fb      	strh	r3, [r7, #22]
    float float_value = (float)value;
 80006aa:	8afb      	ldrh	r3, [r7, #22]
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b4:	edc7 7a07 	vstr	s15, [r7, #28]
    return (float_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80006b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80006bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80006c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80006c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80006cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80006d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80006d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80006dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80006ec:	eeb0 0a67 	vmov.f32	s0, s15
 80006f0:	3724      	adds	r7, #36	@ 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <buzzer_config>:

void buzzer_config(uint16_t distance_buzzer)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	80fb      	strh	r3, [r7, #6]
	if(distance_buzzer>40)
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	2b28      	cmp	r3, #40	@ 0x28
 800070a:	d905      	bls.n	8000718 <buzzer_config+0x1c>
	{
		__HAL_TIM_SET_PRESCALER(&htim3, 19999);
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <buzzer_config+0x68>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
	{
	float frequency=map_frequency(distance_buzzer, 1, 40, 10, 1);
	uint16_t prescaler=(10000/frequency)-1;
	__HAL_TIM_SET_PRESCALER(&htim3, prescaler);
	}
}
 8000716:	e020      	b.n	800075a <buzzer_config+0x5e>
	float frequency=map_frequency(distance_buzzer, 1, 40, 10, 1);
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800071e:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000722:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8000768 <buzzer_config+0x6c>
 8000726:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffb0 	bl	8000690 <map_frequency>
 8000730:	ed87 0a03 	vstr	s0, [r7, #12]
	uint16_t prescaler=(10000/frequency)-1;
 8000734:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800076c <buzzer_config+0x70>
 8000738:	ed97 7a03 	vldr	s14, [r7, #12]
 800073c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000740:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074c:	ee17 3a90 	vmov	r3, s15
 8000750:	817b      	strh	r3, [r7, #10]
	__HAL_TIM_SET_PRESCALER(&htim3, prescaler);
 8000752:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <buzzer_config+0x68>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	897a      	ldrh	r2, [r7, #10]
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000114 	.word	0x20000114
 8000768:	42200000 	.word	0x42200000
 800076c:	461c4000 	.word	0x461c4000

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fdc4 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f83e 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f998 	bl	8000ab0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000780:	f000 f8a4 	bl	80008cc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000784:	f000 f8d0 	bl	8000928 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000788:	f000 f91a 	bl	80009c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800078c:	4815      	ldr	r0, [pc, #84]	@ (80007e4 <main+0x74>)
 800078e:	f002 fa83 	bl	8002c98 <HAL_TIM_Base_Start>
  ssd1306_Init();
 8000792:	f000 fbb7 	bl	8000f04 <ssd1306_Init>
  ssd1306_Fill(White);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fc1e 	bl	8000fd8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800079c:	f000 fc34 	bl	8001008 <ssd1306_UpdateScreen>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007a0:	2100      	movs	r1, #0
 80007a2:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <main+0x78>)
 80007a4:	f002 fb3a 	bl	8002e1c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_time=read_hcsr04();
 80007a8:	f7ff fef2 	bl	8000590 <read_hcsr04>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <main+0x7c>)
 80007b2:	601a      	str	r2, [r3, #0]
	  distance=sensor_time/58;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <main+0x7c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <main+0x80>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <main+0x84>)
 80007c4:	801a      	strh	r2, [r3, #0]
	  buzzer_config(distance);
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <main+0x84>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff96 	bl	80006fc <buzzer_config>
	  display(distance);
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <main+0x84>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff0b 	bl	80005f0 <display>
	  HAL_Delay(60);
 80007da:	203c      	movs	r0, #60	@ 0x3c
 80007dc:	f000 fe02 	bl	80013e4 <HAL_Delay>
	  sensor_time=read_hcsr04();
 80007e0:	bf00      	nop
 80007e2:	e7e1      	b.n	80007a8 <main+0x38>
 80007e4:	200000cc 	.word	0x200000cc
 80007e8:	20000114 	.word	0x20000114
 80007ec:	20000160 	.word	0x20000160
 80007f0:	8d3dcb09 	.word	0x8d3dcb09
 80007f4:	2000015c 	.word	0x2000015c

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	@ 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	@ 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f912 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <SystemClock_Config+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <SystemClock_Config+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <SystemClock_Config+0xd0>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <SystemClock_Config+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800086c:	23a8      	movs	r3, #168	@ 0xa8
 800086e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd37 	bl	80022f0 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000888:	f000 f97c 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000898:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2105      	movs	r1, #5
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 ff98 	bl	80027e0 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b6:	f000 f965 	bl	8000b84 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3750      	adds	r7, #80	@ 0x50
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_I2C1_Init+0x50>)
 80008d2:	4a13      	ldr	r2, [pc, #76]	@ (8000920 <MX_I2C1_Init+0x54>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_I2C1_Init+0x50>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <MX_I2C1_Init+0x58>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_I2C1_Init+0x50>)
 80008ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <MX_I2C1_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_I2C1_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_I2C1_Init+0x50>)
 800090a:	f001 f843 	bl	8001994 <HAL_I2C_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000914:	f000 f936 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000078 	.word	0x20000078
 8000920:	40005400 	.word	0x40005400
 8000924:	000186a0 	.word	0x000186a0

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000946:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_TIM2_Init+0x94>)
 800094e:	2253      	movs	r2, #83	@ 0x53
 8000950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_TIM2_Init+0x94>)
 800095a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <MX_TIM2_Init+0x94>)
 800096e:	f002 f943 	bl	8002bf8 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000978:	f000 f904 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000980:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_TIM2_Init+0x94>)
 800098a:	f002 fbd1 	bl	8003130 <HAL_TIM_ConfigClockSource>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f8f6 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_TIM2_Init+0x94>)
 80009a6:	f002 ffa7 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f8e8 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000cc 	.word	0x200000cc

080009c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	@ 0x38
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 80009f2:	4a2e      	ldr	r2, [pc, #184]	@ (8000aac <MX_TIM3_Init+0xec>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19999;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 80009f8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 8000a04:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a06:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000a0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a18:	4823      	ldr	r0, [pc, #140]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a1a:	f002 f8ed 	bl	8002bf8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a24:	f000 f8ae 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a36:	f002 fb7b 	bl	8003130 <HAL_TIM_ConfigClockSource>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a40:	f000 f8a0 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a44:	4818      	ldr	r0, [pc, #96]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a46:	f002 f98f 	bl	8002d68 <HAL_TIM_PWM_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a50:	f000 f898 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	4619      	mov	r1, r3
 8000a62:	4811      	ldr	r0, [pc, #68]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a64:	f002 ff48 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a6e:	f000 f889 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a72:	2360      	movs	r3, #96	@ 0x60
 8000a74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4199;
 8000a76:	f241 0367 	movw	r3, #4199	@ 0x1067
 8000a7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a8c:	f002 fa8e 	bl	8002fac <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a96:	f000 f875 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a9a:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <MX_TIM3_Init+0xe8>)
 8000a9c:	f000 f91e 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 8000aa0:	bf00      	nop
 8000aa2:	3738      	adds	r7, #56	@ 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000114 	.word	0x20000114
 8000aac:	40000400 	.word	0x40000400

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a2b      	ldr	r2, [pc, #172]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a16      	ldr	r2, [pc, #88]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_GPIO_Init+0xcc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <MX_GPIO_Init+0xd0>)
 8000b3c:	f000 ff10 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b40:	2340      	movs	r3, #64	@ 0x40
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <MX_GPIO_Init+0xd0>)
 8000b54:	f000 fd50 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_GPIO_Init+0xd0>)
 8000b70:	f000 fd42 	bl	80015f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	@ (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	@ 0xc0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3a:	f000 fcdd 	bl	80015f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c80:	d10e      	bne.n	8000ca0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x64>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x64>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x64>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c9e:	e012      	b.n	8000cc6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x68>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10d      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x64>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x64>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x64>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40000400 	.word	0x40000400

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <HAL_TIM_MspPostInit+0x68>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11d      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d1a:	2340      	movs	r3, #64	@ 0x40
 8000d1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <HAL_TIM_MspPostInit+0x70>)
 8000d36:	f000 fc5f 	bl	80015f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40000400 	.word	0x40000400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020800 	.word	0x40020800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 fafd 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f002 fe2e 	bl	8003a40 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000178 	.word	0x20000178
 8000e18:	200006d0 	.word	0x200006d0

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ffea 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f002 fded 	bl	8003a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fc7d 	bl	8000770 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e84:	08004b34 	.word	0x08004b34
  ldr r2, =_sbss
 8000e88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e8c:	200006d0 	.word	0x200006d0

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>

08000e92 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2178      	movs	r1, #120	@ 0x78
 8000ebe:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <ssd1306_WriteCommand+0x2c>)
 8000ec0:	f000 feac 	bl	8001c1c <HAL_I2C_Mem_Write>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000078 	.word	0x20000078

08000ed0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee2:	9202      	str	r2, [sp, #8]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2240      	movs	r2, #64	@ 0x40
 8000eee:	2178      	movs	r1, #120	@ 0x78
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <ssd1306_WriteData+0x30>)
 8000ef2:	f000 fe93 	bl	8001c1c <HAL_I2C_Mem_Write>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000078 	.word	0x20000078

08000f04 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f08:	f7ff ffc3 	bl	8000e92 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f0c:	2064      	movs	r0, #100	@ 0x64
 8000f0e:	f000 fa69 	bl	80013e4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f9d6 	bl	80012c4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f18:	2020      	movs	r0, #32
 8000f1a:	f7ff ffc1 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ffbe 	bl	8000ea0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f24:	20b0      	movs	r0, #176	@ 0xb0
 8000f26:	f7ff ffbb 	bl	8000ea0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f2a:	20c8      	movs	r0, #200	@ 0xc8
 8000f2c:	f7ff ffb8 	bl	8000ea0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ffb5 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ffb2 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f3c:	2040      	movs	r0, #64	@ 0x40
 8000f3e:	f7ff ffaf 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f42:	20ff      	movs	r0, #255	@ 0xff
 8000f44:	f000 f9aa 	bl	800129c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f48:	20a1      	movs	r0, #161	@ 0xa1
 8000f4a:	f7ff ffa9 	bl	8000ea0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f4e:	20a6      	movs	r0, #166	@ 0xa6
 8000f50:	f7ff ffa6 	bl	8000ea0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f54:	20a8      	movs	r0, #168	@ 0xa8
 8000f56:	f7ff ffa3 	bl	8000ea0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f5a:	203f      	movs	r0, #63	@ 0x3f
 8000f5c:	f7ff ffa0 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f60:	20a4      	movs	r0, #164	@ 0xa4
 8000f62:	f7ff ff9d 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f66:	20d3      	movs	r0, #211	@ 0xd3
 8000f68:	f7ff ff9a 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff ff97 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f72:	20d5      	movs	r0, #213	@ 0xd5
 8000f74:	f7ff ff94 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f78:	20f0      	movs	r0, #240	@ 0xf0
 8000f7a:	f7ff ff91 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f7e:	20d9      	movs	r0, #217	@ 0xd9
 8000f80:	f7ff ff8e 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f84:	2022      	movs	r0, #34	@ 0x22
 8000f86:	f7ff ff8b 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f8a:	20da      	movs	r0, #218	@ 0xda
 8000f8c:	f7ff ff88 	bl	8000ea0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f90:	2012      	movs	r0, #18
 8000f92:	f7ff ff85 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f96:	20db      	movs	r0, #219	@ 0xdb
 8000f98:	f7ff ff82 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f9c:	2020      	movs	r0, #32
 8000f9e:	f7ff ff7f 	bl	8000ea0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fa2:	208d      	movs	r0, #141	@ 0x8d
 8000fa4:	f7ff ff7c 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000fa8:	2014      	movs	r0, #20
 8000faa:	f7ff ff79 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 f988 	bl	80012c4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f80f 	bl	8000fd8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000fba:	f000 f825 	bl	8001008 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <ssd1306_Init+0xd0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <ssd1306_Init+0xd0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000fca:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <ssd1306_Init+0xd0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	711a      	strb	r2, [r3, #4]
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000057c 	.word	0x2000057c

08000fd8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <ssd1306_Fill+0x14>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e000      	b.n	8000fee <ssd1306_Fill+0x16>
 8000fec:	23ff      	movs	r3, #255	@ 0xff
 8000fee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <ssd1306_Fill+0x2c>)
 8000ff6:	f002 fd1b 	bl	8003a30 <memset>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000017c 	.word	0x2000017c

08001008 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e016      	b.n	8001042 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3b50      	subs	r3, #80	@ 0x50
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff40 	bl	8000ea0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff3d 	bl	8000ea0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001026:	2010      	movs	r0, #16
 8001028:	f7ff ff3a 	bl	8000ea0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <ssd1306_UpdateScreen+0x4c>)
 8001032:	4413      	add	r3, r2
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff4a 	bl	8000ed0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3301      	adds	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b07      	cmp	r3, #7
 8001046:	d9e5      	bls.n	8001014 <ssd1306_UpdateScreen+0xc>
    }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000017c 	.word	0x2000017c

08001058 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	460b      	mov	r3, r1
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	4613      	mov	r3, r2
 8001068:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db3d      	blt.n	80010ee <ssd1306_DrawPixel+0x96>
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	2b3f      	cmp	r3, #63	@ 0x3f
 8001076:	d83a      	bhi.n	80010ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d11a      	bne.n	80010b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	01db      	lsls	r3, r3, #7
 800108a:	4413      	add	r3, r2
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <ssd1306_DrawPixel+0xa4>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	b25a      	sxtb	r2, r3
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b259      	sxtb	r1, r3
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4603      	mov	r3, r0
 80010a8:	01db      	lsls	r3, r3, #7
 80010aa:	4413      	add	r3, r2
 80010ac:	b2c9      	uxtb	r1, r1
 80010ae:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <ssd1306_DrawPixel+0xa4>)
 80010b0:	54d1      	strb	r1, [r2, r3]
 80010b2:	e01d      	b.n	80010f0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	01db      	lsls	r3, r3, #7
 80010c0:	4413      	add	r3, r2
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <ssd1306_DrawPixel+0xa4>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	b259      	sxtb	r1, r3
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	4603      	mov	r3, r0
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4413      	add	r3, r2
 80010e6:	b2c9      	uxtb	r1, r1
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <ssd1306_DrawPixel+0xa4>)
 80010ea:	54d1      	strb	r1, [r2, r3]
 80010ec:	e000      	b.n	80010f0 <ssd1306_DrawPixel+0x98>
        return;
 80010ee:	bf00      	nop
    }
}
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000017c 	.word	0x2000017c

08001100 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4604      	mov	r4, r0
 8001108:	4638      	mov	r0, r7
 800110a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800110e:	4623      	mov	r3, r4
 8001110:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b1f      	cmp	r3, #31
 8001116:	d902      	bls.n	800111e <ssd1306_WriteChar+0x1e>
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b7e      	cmp	r3, #126	@ 0x7e
 800111c:	d901      	bls.n	8001122 <ssd1306_WriteChar+0x22>
        return 0;
 800111e:	2300      	movs	r3, #0
 8001120:	e077      	b.n	8001212 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001122:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <ssd1306_WriteChar+0x11c>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	783b      	ldrb	r3, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	2b80      	cmp	r3, #128	@ 0x80
 800112e:	dc06      	bgt.n	800113e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001130:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <ssd1306_WriteChar+0x11c>)
 8001132:	885b      	ldrh	r3, [r3, #2]
 8001134:	461a      	mov	r2, r3
 8001136:	787b      	ldrb	r3, [r7, #1]
 8001138:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800113a:	2b40      	cmp	r3, #64	@ 0x40
 800113c:	dd01      	ble.n	8001142 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e067      	b.n	8001212 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e04e      	b.n	80011e6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3b20      	subs	r3, #32
 800114e:	7879      	ldrb	r1, [r7, #1]
 8001150:	fb01 f303 	mul.w	r3, r1, r3
 8001154:	4619      	mov	r1, r3
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	440b      	add	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	e036      	b.n	80011d6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001178:	4b28      	ldr	r3, [pc, #160]	@ (800121c <ssd1306_WriteChar+0x11c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4413      	add	r3, r2
 8001184:	b2d8      	uxtb	r0, r3
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <ssd1306_WriteChar+0x11c>)
 8001188:	885b      	ldrh	r3, [r3, #2]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff ff5d 	bl	8001058 <ssd1306_DrawPixel>
 800119e:	e017      	b.n	80011d0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <ssd1306_WriteChar+0x11c>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b2d8      	uxtb	r0, r3
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <ssd1306_WriteChar+0x11c>)
 80011b0:	885b      	ldrh	r3, [r3, #2]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	f7ff ff44 	bl	8001058 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	783b      	ldrb	r3, [r7, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4293      	cmp	r3, r2
 80011de:	d3c3      	bcc.n	8001168 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	3301      	adds	r3, #1
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	787b      	ldrb	r3, [r7, #1]
 80011e8:	461a      	mov	r2, r3
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d3ab      	bcc.n	8001148 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <ssd1306_WriteChar+0x11c>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d005      	beq.n	8001206 <ssd1306_WriteChar+0x106>
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	3a20      	subs	r2, #32
 8001200:	440a      	add	r2, r1
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	e000      	b.n	8001208 <ssd1306_WriteChar+0x108>
 8001206:	783a      	ldrb	r2, [r7, #0]
 8001208:	4413      	add	r3, r2
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <ssd1306_WriteChar+0x11c>)
 800120e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	2000057c 	.word	0x2000057c

08001220 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	4638      	mov	r0, r7
 800122a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800122e:	e013      	b.n	8001258 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	7818      	ldrb	r0, [r3, #0]
 8001234:	7e3b      	ldrb	r3, [r7, #24]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	463b      	mov	r3, r7
 800123a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123c:	f7ff ff60 	bl	8001100 <ssd1306_WriteChar>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d002      	beq.n	8001252 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	e008      	b.n	8001264 <ssd1306_WriteString+0x44>
        }
        str++;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e7      	bne.n	8001230 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <ssd1306_SetCursor+0x2c>)
 8001282:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <ssd1306_SetCursor+0x2c>)
 800128a:	805a      	strh	r2, [r3, #2]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	2000057c 	.word	0x2000057c

0800129c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80012a6:	2381      	movs	r3, #129	@ 0x81
 80012a8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fdf7 	bl	8000ea0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fdf3 	bl	8000ea0 <ssd1306_WriteCommand>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80012d4:	23af      	movs	r3, #175	@ 0xaf
 80012d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <ssd1306_SetDisplayOn+0x38>)
 80012da:	2201      	movs	r2, #1
 80012dc:	715a      	strb	r2, [r3, #5]
 80012de:	e004      	b.n	80012ea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80012e0:	23ae      	movs	r3, #174	@ 0xae
 80012e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <ssd1306_SetDisplayOn+0x38>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fdd7 	bl	8000ea0 <ssd1306_WriteCommand>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000057c 	.word	0x2000057c

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <HAL_Init+0x40>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <HAL_Init+0x40>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <HAL_Init+0x40>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f931 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fc2c 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f93b 	bl	80015de <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f911 	bl	80015a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	@ (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000584 	.word	0x20000584

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000584 	.word	0x20000584

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	@ (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	@ (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	@ 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff8e 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	@ (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff47 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff5c 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff8e 	bl	80014e4 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5d 	bl	8001490 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffb0 	bl	800154c <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	@ 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	e16b      	b.n	80018ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 815a 	bne.w	80018e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d005      	beq.n	800164a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001646:	2b02      	cmp	r3, #2
 8001648:	d130      	bne.n	80016ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 0201 	and.w	r2, r3, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d017      	beq.n	80016e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d123      	bne.n	800173c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	69b9      	ldr	r1, [r7, #24]
 8001738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0203 	and.w	r2, r3, #3
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80b4 	beq.w	80018e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <HAL_GPIO_Init+0x30c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a5f      	ldr	r2, [pc, #380]	@ (8001904 <HAL_GPIO_Init+0x30c>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <HAL_GPIO_Init+0x30c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179a:	4a5b      	ldr	r2, [pc, #364]	@ (8001908 <HAL_GPIO_Init+0x310>)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a52      	ldr	r2, [pc, #328]	@ (800190c <HAL_GPIO_Init+0x314>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d02b      	beq.n	800181e <HAL_GPIO_Init+0x226>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a51      	ldr	r2, [pc, #324]	@ (8001910 <HAL_GPIO_Init+0x318>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d025      	beq.n	800181a <HAL_GPIO_Init+0x222>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a50      	ldr	r2, [pc, #320]	@ (8001914 <HAL_GPIO_Init+0x31c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d01f      	beq.n	8001816 <HAL_GPIO_Init+0x21e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001918 <HAL_GPIO_Init+0x320>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x21a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4e      	ldr	r2, [pc, #312]	@ (800191c <HAL_GPIO_Init+0x324>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x216>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001920 <HAL_GPIO_Init+0x328>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x212>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_GPIO_Init+0x32c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x20e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001928 <HAL_GPIO_Init+0x330>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x20a>
 80017fe:	2307      	movs	r3, #7
 8001800:	e00e      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001802:	2308      	movs	r3, #8
 8001804:	e00c      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001806:	2306      	movs	r3, #6
 8001808:	e00a      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800180a:	2305      	movs	r3, #5
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800180e:	2304      	movs	r3, #4
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800181e:	2300      	movs	r3, #0
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001830:	4935      	ldr	r1, [pc, #212]	@ (8001908 <HAL_GPIO_Init+0x310>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <HAL_GPIO_Init+0x334>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a32      	ldr	r2, [pc, #200]	@ (800192c <HAL_GPIO_Init+0x334>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_GPIO_Init+0x334>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a27      	ldr	r2, [pc, #156]	@ (800192c <HAL_GPIO_Init+0x334>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_GPIO_Init+0x334>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b6:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <HAL_GPIO_Init+0x334>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_GPIO_Init+0x334>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <HAL_GPIO_Init+0x334>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	f67f ae90 	bls.w	8001614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40013800 	.word	0x40013800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	40021400 	.word	0x40021400
 8001924:	40021800 	.word	0x40021800
 8001928:	40021c00 	.word	0x40021c00
 800192c:	40013c00 	.word	0x40013c00

08001930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e12b      	b.n	8001bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff f910 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	@ 0x24
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019f8:	f001 f8ea 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 80019fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a81      	ldr	r2, [pc, #516]	@ (8001c08 <HAL_I2C_Init+0x274>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d807      	bhi.n	8001a18 <HAL_I2C_Init+0x84>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4a80      	ldr	r2, [pc, #512]	@ (8001c0c <HAL_I2C_Init+0x278>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	e006      	b.n	8001a26 <HAL_I2C_Init+0x92>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c10 <HAL_I2C_Init+0x27c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0e7      	b.n	8001bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4a78      	ldr	r2, [pc, #480]	@ (8001c14 <HAL_I2C_Init+0x280>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c08 <HAL_I2C_Init+0x274>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d802      	bhi.n	8001a68 <HAL_I2C_Init+0xd4>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3301      	adds	r3, #1
 8001a66:	e009      	b.n	8001a7c <HAL_I2C_Init+0xe8>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	4a69      	ldr	r2, [pc, #420]	@ (8001c18 <HAL_I2C_Init+0x284>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	495c      	ldr	r1, [pc, #368]	@ (8001c08 <HAL_I2C_Init+0x274>)
 8001a98:	428b      	cmp	r3, r1
 8001a9a:	d819      	bhi.n	8001ad0 <HAL_I2C_Init+0x13c>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aaa:	1c59      	adds	r1, r3, #1
 8001aac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <HAL_I2C_Init+0x138>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1e59      	subs	r1, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aca:	e051      	b.n	8001b70 <HAL_I2C_Init+0x1dc>
 8001acc:	2304      	movs	r3, #4
 8001ace:	e04f      	b.n	8001b70 <HAL_I2C_Init+0x1dc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d111      	bne.n	8001afc <HAL_I2C_Init+0x168>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e012      	b.n	8001b22 <HAL_I2C_Init+0x18e>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e58      	subs	r0, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	0099      	lsls	r1, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Init+0x196>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e022      	b.n	8001b70 <HAL_I2C_Init+0x1dc>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10e      	bne.n	8001b50 <HAL_I2C_Init+0x1bc>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1e58      	subs	r0, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	440b      	add	r3, r1
 8001b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b4e:	e00f      	b.n	8001b70 <HAL_I2C_Init+0x1dc>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1e58      	subs	r0, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	0099      	lsls	r1, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b66:	3301      	adds	r3, #1
 8001b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	6809      	ldr	r1, [r1, #0]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6911      	ldr	r1, [r2, #16]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68d2      	ldr	r2, [r2, #12]
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	000186a0 	.word	0x000186a0
 8001c0c:	001e847f 	.word	0x001e847f
 8001c10:	003d08ff 	.word	0x003d08ff
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	10624dd3 	.word	0x10624dd3

08001c1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	4608      	mov	r0, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	817b      	strh	r3, [r7, #10]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	813b      	strh	r3, [r7, #8]
 8001c32:	4613      	mov	r3, r2
 8001c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c36:	f7ff fbc9 	bl	80013cc <HAL_GetTick>
 8001c3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	f040 80d9 	bne.w	8001dfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2319      	movs	r3, #25
 8001c50:	2201      	movs	r2, #1
 8001c52:	496d      	ldr	r1, [pc, #436]	@ (8001e08 <HAL_I2C_Mem_Write+0x1ec>)
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f971 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0cc      	b.n	8001dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_I2C_Mem_Write+0x56>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e0c5      	b.n	8001dfe <HAL_I2C_Mem_Write+0x1e2>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d007      	beq.n	8001c98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2221      	movs	r2, #33	@ 0x21
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2240      	movs	r2, #64	@ 0x40
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8001e0c <HAL_I2C_Mem_Write+0x1f0>)
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cda:	88f8      	ldrh	r0, [r7, #6]
 8001cdc:	893a      	ldrh	r2, [r7, #8]
 8001cde:	8979      	ldrh	r1, [r7, #10]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4603      	mov	r3, r0
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f890 	bl	8001e10 <I2C_RequestMemoryWrite>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d052      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e081      	b.n	8001dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fa36 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_I2C_Mem_Write+0x180>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d017      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1aa      	bne.n	8001cfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fa29 	bl	8002200 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00d      	beq.n	8001dd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d107      	bne.n	8001dcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e016      	b.n	8001dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	00100002 	.word	0x00100002
 8001e0c:	ffff0000 	.word	0xffff0000

08001e10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	460b      	mov	r3, r1
 8001e24:	813b      	strh	r3, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f878 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e60:	d103      	bne.n	8001e6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e05f      	b.n	8001f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e6e:	897b      	ldrh	r3, [r7, #10]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	492d      	ldr	r1, [pc, #180]	@ (8001f38 <I2C_RequestMemoryWrite+0x128>)
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f8d3 	bl	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e04c      	b.n	8001f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f95e 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d107      	bne.n	8001ed2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e02b      	b.n	8001f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001edc:	893b      	ldrh	r3, [r7, #8]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	611a      	str	r2, [r3, #16]
 8001ee6:	e021      	b.n	8001f2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f938 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d107      	bne.n	8001f1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e005      	b.n	8001f2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f22:	893b      	ldrh	r3, [r7, #8]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	00010002 	.word	0x00010002

08001f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4c:	e048      	b.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d044      	beq.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f56:	f7ff fa39 	bl	80013cc <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d139      	bne.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10d      	bne.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4013      	ands	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	e00c      	b.n	8001fac <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d116      	bne.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e023      	b.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10d      	bne.n	8002006 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	e00c      	b.n	8002020 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	43da      	mvns	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4013      	ands	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	429a      	cmp	r2, r3
 8002024:	d093      	beq.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203e:	e071      	b.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d123      	bne.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e067      	b.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d041      	beq.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a0:	f7ff f994 	bl	80013cc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d302      	bcc.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d136      	bne.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10c      	bne.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e00b      	b.n	80020f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e021      	b.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d10c      	bne.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e00b      	b.n	8002160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	f47f af6d 	bne.w	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217c:	e034      	b.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f886 	bl	8002290 <I2C_IsAcknowledgeFailed>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e034      	b.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d028      	beq.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff f919 	bl	80013cc <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11d      	bne.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	2b80      	cmp	r3, #128	@ 0x80
 80021b8:	d016      	beq.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f2:	2b80      	cmp	r3, #128	@ 0x80
 80021f4:	d1c3      	bne.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800220c:	e034      	b.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f83e 	bl	8002290 <I2C_IsAcknowledgeFailed>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e034      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d028      	beq.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff f8d1 	bl	80013cc <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11d      	bne.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b04      	cmp	r3, #4
 8002248:	d016      	beq.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e007      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b04      	cmp	r3, #4
 8002284:	d1c3      	bne.n	800220e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a6:	d11b      	bne.n	80022e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e267      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d075      	beq.n	80023fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230e:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b04      	cmp	r3, #4
 8002318:	d00c      	beq.n	8002334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b85      	ldr	r3, [pc, #532]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002322:	2b08      	cmp	r3, #8
 8002324:	d112      	bne.n	800234c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b82      	ldr	r3, [pc, #520]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b7e      	ldr	r3, [pc, #504]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05b      	beq.n	80023f8 <HAL_RCC_OscConfig+0x108>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d157      	bne.n	80023f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e242      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x74>
 8002356:	4b76      	ldr	r3, [pc, #472]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a75      	ldr	r2, [pc, #468]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xb0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x98>
 800236e:	4b70      	ldr	r3, [pc, #448]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6f      	ldr	r2, [pc, #444]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6d      	ldr	r3, [pc, #436]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6c      	ldr	r2, [pc, #432]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xb0>
 8002388:	4b69      	ldr	r3, [pc, #420]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a68      	ldr	r2, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff f810 	bl	80013cc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff f80c 	bl	80013cc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e207      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xc0>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fffc 	bl	80013cc <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fff8 	bl	80013cc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1f3      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0xe8>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002406:	4b4a      	ldr	r3, [pc, #296]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b47      	ldr	r3, [pc, #284]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241a:	2b08      	cmp	r3, #8
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b44      	ldr	r3, [pc, #272]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x152>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1c7      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b3b      	ldr	r3, [pc, #236]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4937      	ldr	r1, [pc, #220]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e03a      	b.n	80024ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe ffb1 	bl	80013cc <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe ffad 	bl	80013cc <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1a8      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4925      	ldr	r1, [pc, #148]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe ff90 	bl	80013cc <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe ff8c 	bl	80013cc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e187      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d036      	beq.n	8002548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_RCC_OscConfig+0x248>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe ff70 	bl	80013cc <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe ff6c 	bl	80013cc <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e167      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_RCC_OscConfig+0x240>)
 8002504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x200>
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_OscConfig+0x248>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe ff59 	bl	80013cc <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	e00e      	b.n	800253c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251e:	f7fe ff55 	bl	80013cc <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d907      	bls.n	800253c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e150      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
 8002530:	40023800 	.word	0x40023800
 8002534:	42470000 	.word	0x42470000
 8002538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b88      	ldr	r3, [pc, #544]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ea      	bne.n	800251e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8097 	beq.w	8002684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b81      	ldr	r3, [pc, #516]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b7d      	ldr	r3, [pc, #500]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	4a7c      	ldr	r2, [pc, #496]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	@ 0x40
 8002576:	4b7a      	ldr	r3, [pc, #488]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b77      	ldr	r3, [pc, #476]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b74      	ldr	r3, [pc, #464]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a73      	ldr	r2, [pc, #460]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe ff15 	bl	80013cc <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe ff11 	bl	80013cc <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e10c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002764 <HAL_RCC_OscConfig+0x474>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x2ea>
 80025cc:	4b64      	ldr	r3, [pc, #400]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d0:	4a63      	ldr	r2, [pc, #396]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d8:	e01c      	b.n	8002614 <HAL_RCC_OscConfig+0x324>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x30c>
 80025e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0x324>
 80025fc:	4b58      	ldr	r3, [pc, #352]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a57      	ldr	r2, [pc, #348]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
 8002608:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	4a54      	ldr	r2, [pc, #336]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0304 	bic.w	r3, r3, #4
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d015      	beq.n	8002648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fed6 	bl	80013cc <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe fed2 	bl	80013cc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0cb      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ee      	beq.n	8002624 <HAL_RCC_OscConfig+0x334>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7fe fec0 	bl	80013cc <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe febc 	bl	80013cc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0b5      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ee      	bne.n	8002650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002678:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4a38      	ldr	r2, [pc, #224]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a1 	beq.w	80027d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268e:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d05c      	beq.n	8002754 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d141      	bne.n	8002726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_RCC_OscConfig+0x478>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fe90 	bl	80013cc <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fe8c 	bl	80013cc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e087      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b27      	ldr	r3, [pc, #156]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	491b      	ldr	r1, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x478>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fe65 	bl	80013cc <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe fe61 	bl	80013cc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e05c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x416>
 8002724:	e054      	b.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_RCC_OscConfig+0x478>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fe4e 	bl	80013cc <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fe4a 	bl	80013cc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e045      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_OscConfig+0x470>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x444>
 8002752:	e03d      	b.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e038      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000
 8002768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x4ec>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d028      	beq.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d121      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d11a      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d111      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0cc      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b68      	ldr	r3, [pc, #416]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d90c      	bls.n	800281c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b65      	ldr	r3, [pc, #404]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a58      	ldr	r2, [pc, #352]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a52      	ldr	r2, [pc, #328]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d044      	beq.n	8002900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d119      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	2b03      	cmp	r3, #3
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e067      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028be:	4b37      	ldr	r3, [pc, #220]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 0203 	bic.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4934      	ldr	r1, [pc, #208]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d0:	f7fe fd7c 	bl	80013cc <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7fe fd78 	bl	80013cc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 020c 	and.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1eb      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20c      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002952:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fcdc 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00
 800299c:	40023800 	.word	0x40023800
 80029a0:	08004360 	.word	0x08004360
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b0:	b094      	sub	sp, #80	@ 0x50
 80029b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b8:	2300      	movs	r3, #0
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029bc:	2300      	movs	r3, #0
 80029be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c4:	4b79      	ldr	r3, [pc, #484]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x200>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d00d      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x40>
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	f200 80e1 	bhi.w	8002b98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029de:	e0db      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b73      	ldr	r3, [pc, #460]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80029e4:	e0db      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e6:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x208>)
 80029e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ea:	e0d8      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x200>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f6:	4b6d      	ldr	r3, [pc, #436]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	2200      	movs	r2, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a16:	2300      	movs	r3, #0
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	0159      	lsls	r1, r3, #5
 8002a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a30:	0150      	lsls	r0, r2, #5
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4621      	mov	r1, r4
 8002a38:	1a51      	subs	r1, r2, r1
 8002a3a:	6139      	str	r1, [r7, #16]
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a50:	4659      	mov	r1, fp
 8002a52:	018b      	lsls	r3, r1, #6
 8002a54:	4651      	mov	r1, sl
 8002a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	018a      	lsls	r2, r1, #6
 8002a5e:	4651      	mov	r1, sl
 8002a60:	ebb2 0801 	subs.w	r8, r2, r1
 8002a64:	4659      	mov	r1, fp
 8002a66:	eb63 0901 	sbc.w	r9, r3, r1
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7e:	4690      	mov	r8, r2
 8002a80:	4699      	mov	r9, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	eb18 0303 	adds.w	r3, r8, r3
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	462b      	mov	r3, r5
 8002a8c:	eb49 0303 	adc.w	r3, r9, r3
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	024b      	lsls	r3, r1, #9
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	024a      	lsls	r2, r1, #9
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002abc:	f7fd fbd8 	bl	8000270 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac8:	e058      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	4b38      	ldr	r3, [pc, #224]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x200>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	f04f 0000 	mov.w	r0, #0
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	0159      	lsls	r1, r3, #5
 8002af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af6:	0150      	lsls	r0, r2, #5
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4641      	mov	r1, r8
 8002afe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b02:	4649      	mov	r1, r9
 8002b04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b20:	eb63 050b 	sbc.w	r5, r3, fp
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	00eb      	lsls	r3, r5, #3
 8002b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b32:	00e2      	lsls	r2, r4, #3
 8002b34:	4614      	mov	r4, r2
 8002b36:	461d      	mov	r5, r3
 8002b38:	4643      	mov	r3, r8
 8002b3a:	18e3      	adds	r3, r4, r3
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	464b      	mov	r3, r9
 8002b40:	eb45 0303 	adc.w	r3, r5, r3
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b52:	4629      	mov	r1, r5
 8002b54:	028b      	lsls	r3, r1, #10
 8002b56:	4621      	mov	r1, r4
 8002b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	028a      	lsls	r2, r1, #10
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b66:	2200      	movs	r2, #0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	61fa      	str	r2, [r7, #28]
 8002b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b70:	f7fd fb7e 	bl	8000270 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3750      	adds	r7, #80	@ 0x50
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	007a1200 	.word	0x007a1200

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0a9b      	lsrs	r3, r3, #10
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08004370 	.word	0x08004370

08002bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e041      	b.n	8002c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe f826 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f000 fb42 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d001      	beq.n	8002cb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e046      	b.n	8002d3e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a23      	ldr	r2, [pc, #140]	@ (8002d4c <HAL_TIM_Base_Start+0xb4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cca:	d01d      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d50 <HAL_TIM_Base_Start+0xb8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1e      	ldr	r2, [pc, #120]	@ (8002d54 <HAL_TIM_Base_Start+0xbc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d58 <HAL_TIM_Base_Start+0xc0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1b      	ldr	r2, [pc, #108]	@ (8002d5c <HAL_TIM_Base_Start+0xc4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	@ (8002d60 <HAL_TIM_Base_Start+0xc8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_TIM_Base_Start+0x70>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_TIM_Base_Start+0xcc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d010      	beq.n	8002d3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	e007      	b.n	8002d3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	40010400 	.word	0x40010400
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40001800 	.word	0x40001800

08002d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e041      	b.n	8002dfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f839 	bl	8002e06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f000 fa8a 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_TIM_PWM_Start+0x24>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e022      	b.n	8002e86 <HAL_TIM_PWM_Start+0x6a>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d109      	bne.n	8002e5a <HAL_TIM_PWM_Start+0x3e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e015      	b.n	8002e86 <HAL_TIM_PWM_Start+0x6a>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d109      	bne.n	8002e74 <HAL_TIM_PWM_Start+0x58>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e008      	b.n	8002e86 <HAL_TIM_PWM_Start+0x6a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07c      	b.n	8002f88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Start+0x82>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e9c:	e013      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xaa>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_PWM_Start+0x92>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eac:	e00b      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xaa>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_PWM_Start+0xa2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ebc:	e003      	b.n	8002ec6 <HAL_TIM_PWM_Start+0xaa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fcec 	bl	80038ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f90 <HAL_TIM_PWM_Start+0x174>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIM_PWM_Start+0xcc>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f94 <HAL_TIM_PWM_Start+0x178>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_PWM_Start+0xd0>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_TIM_PWM_Start+0xd2>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <HAL_TIM_PWM_Start+0x174>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d01d      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <HAL_TIM_PWM_Start+0x17c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <HAL_TIM_PWM_Start+0x180>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa0 <HAL_TIM_PWM_Start+0x184>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a16      	ldr	r2, [pc, #88]	@ (8002f94 <HAL_TIM_PWM_Start+0x178>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a18      	ldr	r2, [pc, #96]	@ (8002fa4 <HAL_TIM_PWM_Start+0x188>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x136>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a16      	ldr	r2, [pc, #88]	@ (8002fa8 <HAL_TIM_PWM_Start+0x18c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e007      	b.n	8002f86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010400 	.word	0x40010400
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40001800 	.word	0x40001800

08002fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0ae      	b.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	f200 809f 	bhi.w	8003118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fda:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003119 	.word	0x08003119
 8002fe8:	08003119 	.word	0x08003119
 8002fec:	08003119 	.word	0x08003119
 8002ff0:	08003055 	.word	0x08003055
 8002ff4:	08003119 	.word	0x08003119
 8002ff8:	08003119 	.word	0x08003119
 8002ffc:	08003119 	.word	0x08003119
 8003000:	08003097 	.word	0x08003097
 8003004:	08003119 	.word	0x08003119
 8003008:	08003119 	.word	0x08003119
 800300c:	08003119 	.word	0x08003119
 8003010:	080030d7 	.word	0x080030d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f9fc 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6999      	ldr	r1, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	619a      	str	r2, [r3, #24]
      break;
 8003052:	e064      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fa4c 	bl	80034f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	021a      	lsls	r2, r3, #8
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
      break;
 8003094:	e043      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 faa1 	bl	80035e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0208 	orr.w	r2, r2, #8
 80030b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69da      	ldr	r2, [r3, #28]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0204 	bic.w	r2, r2, #4
 80030c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69d9      	ldr	r1, [r3, #28]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
      break;
 80030d4:	e023      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 faf5 	bl	80036cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69d9      	ldr	r1, [r3, #28]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	021a      	lsls	r2, r3, #8
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	61da      	str	r2, [r3, #28]
      break;
 8003116:	e002      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
      break;
 800311c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_TIM_ConfigClockSource+0x1c>
 8003148:	2302      	movs	r3, #2
 800314a:	e0b4      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x186>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800316a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003184:	d03e      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0xd4>
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318a:	f200 8087 	bhi.w	800329c <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003192:	f000 8086 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x172>
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319a:	d87f      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b70      	cmp	r3, #112	@ 0x70
 800319e:	d01a      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xa6>
 80031a0:	2b70      	cmp	r3, #112	@ 0x70
 80031a2:	d87b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b60      	cmp	r3, #96	@ 0x60
 80031a6:	d050      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x11a>
 80031a8:	2b60      	cmp	r3, #96	@ 0x60
 80031aa:	d877      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b50      	cmp	r3, #80	@ 0x50
 80031ae:	d03c      	beq.n	800322a <HAL_TIM_ConfigClockSource+0xfa>
 80031b0:	2b50      	cmp	r3, #80	@ 0x50
 80031b2:	d873      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d058      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x13a>
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d86f      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b30      	cmp	r3, #48	@ 0x30
 80031be:	d064      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b30      	cmp	r3, #48	@ 0x30
 80031c2:	d86b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d060      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d867      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d05a      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031d4:	e062      	b.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	f000 fb41 	bl	800386c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
      break;
 8003202:	e04f      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	f000 fb2a 	bl	800386c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003226:	609a      	str	r2, [r3, #8]
      break;
 8003228:	e03c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	461a      	mov	r2, r3
 8003238:	f000 fa9e 	bl	8003778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2150      	movs	r1, #80	@ 0x50
 8003242:	4618      	mov	r0, r3
 8003244:	f000 faf7 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 8003248:	e02c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003256:	461a      	mov	r2, r3
 8003258:	f000 fabd 	bl	80037d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2160      	movs	r1, #96	@ 0x60
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fae7 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 8003268:	e01c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	461a      	mov	r2, r3
 8003278:	f000 fa7e 	bl	8003778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2140      	movs	r1, #64	@ 0x40
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fad7 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 8003288:	e00c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f000 face 	bl	8003836 <TIM_ITRx_SetConfig>
      break;
 800329a:	e003      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e000      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a46      	ldr	r2, [pc, #280]	@ (80033ec <TIM_Base_SetConfig+0x12c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a43      	ldr	r2, [pc, #268]	@ (80033f0 <TIM_Base_SetConfig+0x130>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a42      	ldr	r2, [pc, #264]	@ (80033f4 <TIM_Base_SetConfig+0x134>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a41      	ldr	r2, [pc, #260]	@ (80033f8 <TIM_Base_SetConfig+0x138>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a40      	ldr	r2, [pc, #256]	@ (80033fc <TIM_Base_SetConfig+0x13c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a35      	ldr	r2, [pc, #212]	@ (80033ec <TIM_Base_SetConfig+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003320:	d027      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d023      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a31      	ldr	r2, [pc, #196]	@ (80033f4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a30      	ldr	r2, [pc, #192]	@ (80033f8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d017      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2e      	ldr	r2, [pc, #184]	@ (8003400 <TIM_Base_SetConfig+0x140>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2d      	ldr	r2, [pc, #180]	@ (8003404 <TIM_Base_SetConfig+0x144>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2c      	ldr	r2, [pc, #176]	@ (8003408 <TIM_Base_SetConfig+0x148>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2b      	ldr	r2, [pc, #172]	@ (800340c <TIM_Base_SetConfig+0x14c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2a      	ldr	r2, [pc, #168]	@ (8003410 <TIM_Base_SetConfig+0x150>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <TIM_Base_SetConfig+0x154>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a10      	ldr	r2, [pc, #64]	@ (80033ec <TIM_Base_SetConfig+0x12c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <TIM_Base_SetConfig+0x13c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]
  }
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40010400 	.word	0x40010400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800
 800340c:	40001800 	.word	0x40001800
 8003410:	40001c00 	.word	0x40001c00
 8003414:	40002000 	.word	0x40002000

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0201 	bic.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <TIM_OC1_SetConfig+0xd8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_OC1_SetConfig+0x64>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <TIM_OC1_SetConfig+0xdc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10c      	bne.n	8003496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0308 	bic.w	r3, r3, #8
 8003482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 0304 	bic.w	r3, r3, #4
 8003494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <TIM_OC1_SetConfig+0xd8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC1_SetConfig+0x8e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <TIM_OC1_SetConfig+0xdc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	621a      	str	r2, [r3, #32]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40010400 	.word	0x40010400

080034f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f023 0210 	bic.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <TIM_OC2_SetConfig+0xe4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC2_SetConfig+0x68>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <TIM_OC2_SetConfig+0xe8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10d      	bne.n	800357c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800357a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a17      	ldr	r2, [pc, #92]	@ (80035dc <TIM_OC2_SetConfig+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_OC2_SetConfig+0x94>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <TIM_OC2_SetConfig+0xe8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d113      	bne.n	80035b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010400 	.word	0x40010400

080035e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800362c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <TIM_OC3_SetConfig+0xe0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_OC3_SetConfig+0x66>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a20      	ldr	r2, [pc, #128]	@ (80036c8 <TIM_OC3_SetConfig+0xe4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10d      	bne.n	8003666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a16      	ldr	r2, [pc, #88]	@ (80036c4 <TIM_OC3_SetConfig+0xe0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_OC3_SetConfig+0x92>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <TIM_OC3_SetConfig+0xe4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d113      	bne.n	800369e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800367c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	621a      	str	r2, [r3, #32]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010400 	.word	0x40010400

080036cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <TIM_OC4_SetConfig+0xa4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_OC4_SetConfig+0x68>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <TIM_OC4_SetConfig+0xa8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d109      	bne.n	8003748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800373a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f023 0201 	bic.w	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 030a 	bic.w	r3, r3, #10
 80037b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f023 0210 	bic.w	r2, r3, #16
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	031b      	lsls	r3, r3, #12
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003812:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	f043 0307 	orr.w	r3, r3, #7
 8003858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	609a      	str	r2, [r3, #8]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	021a      	lsls	r2, r3, #8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	431a      	orrs	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2201      	movs	r2, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	401a      	ands	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e05a      	b.n	80039c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a21      	ldr	r2, [pc, #132]	@ (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395c:	d01d      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1b      	ldr	r2, [pc, #108]	@ (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1a      	ldr	r2, [pc, #104]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a18      	ldr	r2, [pc, #96]	@ (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a15      	ldr	r2, [pc, #84]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10c      	bne.n	80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40001800 	.word	0x40001800

080039f0 <siprintf>:
 80039f0:	b40e      	push	{r1, r2, r3}
 80039f2:	b500      	push	{lr}
 80039f4:	b09c      	sub	sp, #112	@ 0x70
 80039f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80039f8:	9002      	str	r0, [sp, #8]
 80039fa:	9006      	str	r0, [sp, #24]
 80039fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a00:	4809      	ldr	r0, [pc, #36]	@ (8003a28 <siprintf+0x38>)
 8003a02:	9107      	str	r1, [sp, #28]
 8003a04:	9104      	str	r1, [sp, #16]
 8003a06:	4909      	ldr	r1, [pc, #36]	@ (8003a2c <siprintf+0x3c>)
 8003a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a0c:	9105      	str	r1, [sp, #20]
 8003a0e:	6800      	ldr	r0, [r0, #0]
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	a902      	add	r1, sp, #8
 8003a14:	f000 f9a2 	bl	8003d5c <_svfiprintf_r>
 8003a18:	9b02      	ldr	r3, [sp, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	b01c      	add	sp, #112	@ 0x70
 8003a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a24:	b003      	add	sp, #12
 8003a26:	4770      	bx	lr
 8003a28:	2000000c 	.word	0x2000000c
 8003a2c:	ffff0208 	.word	0xffff0208

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	@ (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a84 <__libc_init_array+0x38>)
 8003a50:	4c0d      	ldr	r4, [pc, #52]	@ (8003a88 <__libc_init_array+0x3c>)
 8003a52:	1b64      	subs	r4, r4, r5
 8003a54:	10a4      	asrs	r4, r4, #2
 8003a56:	2600      	movs	r6, #0
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a8c <__libc_init_array+0x40>)
 8003a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a90 <__libc_init_array+0x44>)
 8003a60:	f000 fc66 	bl	8004330 <_init>
 8003a64:	1b64      	subs	r4, r4, r5
 8003a66:	10a4      	asrs	r4, r4, #2
 8003a68:	2600      	movs	r6, #0
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	08004b2c 	.word	0x08004b2c
 8003a88:	08004b2c 	.word	0x08004b2c
 8003a8c:	08004b2c 	.word	0x08004b2c
 8003a90:	08004b30 	.word	0x08004b30

08003a94 <__retarget_lock_acquire_recursive>:
 8003a94:	4770      	bx	lr

08003a96 <__retarget_lock_release_recursive>:
 8003a96:	4770      	bx	lr

08003a98 <memcpy>:
 8003a98:	440a      	add	r2, r1
 8003a9a:	4291      	cmp	r1, r2
 8003a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003aa0:	d100      	bne.n	8003aa4 <memcpy+0xc>
 8003aa2:	4770      	bx	lr
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aae:	4291      	cmp	r1, r2
 8003ab0:	d1f9      	bne.n	8003aa6 <memcpy+0xe>
 8003ab2:	bd10      	pop	{r4, pc}

08003ab4 <_free_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d041      	beq.n	8003b40 <_free_r+0x8c>
 8003abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac0:	1f0c      	subs	r4, r1, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfb8      	it	lt
 8003ac6:	18e4      	addlt	r4, r4, r3
 8003ac8:	f000 f8e0 	bl	8003c8c <__malloc_lock>
 8003acc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b44 <_free_r+0x90>)
 8003ace:	6813      	ldr	r3, [r2, #0]
 8003ad0:	b933      	cbnz	r3, 8003ae0 <_free_r+0x2c>
 8003ad2:	6063      	str	r3, [r4, #4]
 8003ad4:	6014      	str	r4, [r2, #0]
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003adc:	f000 b8dc 	b.w	8003c98 <__malloc_unlock>
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	d908      	bls.n	8003af6 <_free_r+0x42>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	1821      	adds	r1, r4, r0
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	bf01      	itttt	eq
 8003aec:	6819      	ldreq	r1, [r3, #0]
 8003aee:	685b      	ldreq	r3, [r3, #4]
 8003af0:	1809      	addeq	r1, r1, r0
 8003af2:	6021      	streq	r1, [r4, #0]
 8003af4:	e7ed      	b.n	8003ad2 <_free_r+0x1e>
 8003af6:	461a      	mov	r2, r3
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	b10b      	cbz	r3, 8003b00 <_free_r+0x4c>
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d9fa      	bls.n	8003af6 <_free_r+0x42>
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	1850      	adds	r0, r2, r1
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d10b      	bne.n	8003b20 <_free_r+0x6c>
 8003b08:	6820      	ldr	r0, [r4, #0]
 8003b0a:	4401      	add	r1, r0
 8003b0c:	1850      	adds	r0, r2, r1
 8003b0e:	4283      	cmp	r3, r0
 8003b10:	6011      	str	r1, [r2, #0]
 8003b12:	d1e0      	bne.n	8003ad6 <_free_r+0x22>
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	6053      	str	r3, [r2, #4]
 8003b1a:	4408      	add	r0, r1
 8003b1c:	6010      	str	r0, [r2, #0]
 8003b1e:	e7da      	b.n	8003ad6 <_free_r+0x22>
 8003b20:	d902      	bls.n	8003b28 <_free_r+0x74>
 8003b22:	230c      	movs	r3, #12
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	e7d6      	b.n	8003ad6 <_free_r+0x22>
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	1821      	adds	r1, r4, r0
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	bf04      	itt	eq
 8003b30:	6819      	ldreq	r1, [r3, #0]
 8003b32:	685b      	ldreq	r3, [r3, #4]
 8003b34:	6063      	str	r3, [r4, #4]
 8003b36:	bf04      	itt	eq
 8003b38:	1809      	addeq	r1, r1, r0
 8003b3a:	6021      	streq	r1, [r4, #0]
 8003b3c:	6054      	str	r4, [r2, #4]
 8003b3e:	e7ca      	b.n	8003ad6 <_free_r+0x22>
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
 8003b42:	bf00      	nop
 8003b44:	200006cc 	.word	0x200006cc

08003b48 <sbrk_aligned>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b88 <sbrk_aligned+0x40>)
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	6831      	ldr	r1, [r6, #0]
 8003b50:	4605      	mov	r5, r0
 8003b52:	b911      	cbnz	r1, 8003b5a <sbrk_aligned+0x12>
 8003b54:	f000 fba6 	bl	80042a4 <_sbrk_r>
 8003b58:	6030      	str	r0, [r6, #0]
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 fba1 	bl	80042a4 <_sbrk_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	d103      	bne.n	8003b6e <sbrk_aligned+0x26>
 8003b66:	f04f 34ff 	mov.w	r4, #4294967295
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	1cc4      	adds	r4, r0, #3
 8003b70:	f024 0403 	bic.w	r4, r4, #3
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d0f8      	beq.n	8003b6a <sbrk_aligned+0x22>
 8003b78:	1a21      	subs	r1, r4, r0
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fb92 	bl	80042a4 <_sbrk_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d1f2      	bne.n	8003b6a <sbrk_aligned+0x22>
 8003b84:	e7ef      	b.n	8003b66 <sbrk_aligned+0x1e>
 8003b86:	bf00      	nop
 8003b88:	200006c8 	.word	0x200006c8

08003b8c <_malloc_r>:
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b90:	1ccd      	adds	r5, r1, #3
 8003b92:	f025 0503 	bic.w	r5, r5, #3
 8003b96:	3508      	adds	r5, #8
 8003b98:	2d0c      	cmp	r5, #12
 8003b9a:	bf38      	it	cc
 8003b9c:	250c      	movcc	r5, #12
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	db01      	blt.n	8003ba8 <_malloc_r+0x1c>
 8003ba4:	42a9      	cmp	r1, r5
 8003ba6:	d904      	bls.n	8003bb2 <_malloc_r+0x26>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	2000      	movs	r0, #0
 8003bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c88 <_malloc_r+0xfc>
 8003bb6:	f000 f869 	bl	8003c8c <__malloc_lock>
 8003bba:	f8d8 3000 	ldr.w	r3, [r8]
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	bb44      	cbnz	r4, 8003c14 <_malloc_r+0x88>
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ffbf 	bl	8003b48 <sbrk_aligned>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	4604      	mov	r4, r0
 8003bce:	d158      	bne.n	8003c82 <_malloc_r+0xf6>
 8003bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd4:	4627      	mov	r7, r4
 8003bd6:	2f00      	cmp	r7, #0
 8003bd8:	d143      	bne.n	8003c62 <_malloc_r+0xd6>
 8003bda:	2c00      	cmp	r4, #0
 8003bdc:	d04b      	beq.n	8003c76 <_malloc_r+0xea>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	4639      	mov	r1, r7
 8003be2:	4630      	mov	r0, r6
 8003be4:	eb04 0903 	add.w	r9, r4, r3
 8003be8:	f000 fb5c 	bl	80042a4 <_sbrk_r>
 8003bec:	4581      	cmp	r9, r0
 8003bee:	d142      	bne.n	8003c76 <_malloc_r+0xea>
 8003bf0:	6821      	ldr	r1, [r4, #0]
 8003bf2:	1a6d      	subs	r5, r5, r1
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f7ff ffa6 	bl	8003b48 <sbrk_aligned>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d03a      	beq.n	8003c76 <_malloc_r+0xea>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	442b      	add	r3, r5
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	bb62      	cbnz	r2, 8003c68 <_malloc_r+0xdc>
 8003c0e:	f8c8 7000 	str.w	r7, [r8]
 8003c12:	e00f      	b.n	8003c34 <_malloc_r+0xa8>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	1b52      	subs	r2, r2, r5
 8003c18:	d420      	bmi.n	8003c5c <_malloc_r+0xd0>
 8003c1a:	2a0b      	cmp	r2, #11
 8003c1c:	d917      	bls.n	8003c4e <_malloc_r+0xc2>
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	6025      	str	r5, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	6059      	strne	r1, [r3, #4]
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	bf08      	it	eq
 8003c2c:	f8c8 1000 	streq.w	r1, [r8]
 8003c30:	5162      	str	r2, [r4, r5]
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f82f 	bl	8003c98 <__malloc_unlock>
 8003c3a:	f104 000b 	add.w	r0, r4, #11
 8003c3e:	1d23      	adds	r3, r4, #4
 8003c40:	f020 0007 	bic.w	r0, r0, #7
 8003c44:	1ac2      	subs	r2, r0, r3
 8003c46:	bf1c      	itt	ne
 8003c48:	1a1b      	subne	r3, r3, r0
 8003c4a:	50a3      	strne	r3, [r4, r2]
 8003c4c:	e7af      	b.n	8003bae <_malloc_r+0x22>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	bf0c      	ite	eq
 8003c54:	f8c8 2000 	streq.w	r2, [r8]
 8003c58:	605a      	strne	r2, [r3, #4]
 8003c5a:	e7eb      	b.n	8003c34 <_malloc_r+0xa8>
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	6864      	ldr	r4, [r4, #4]
 8003c60:	e7ae      	b.n	8003bc0 <_malloc_r+0x34>
 8003c62:	463c      	mov	r4, r7
 8003c64:	687f      	ldr	r7, [r7, #4]
 8003c66:	e7b6      	b.n	8003bd6 <_malloc_r+0x4a>
 8003c68:	461a      	mov	r2, r3
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d1fb      	bne.n	8003c68 <_malloc_r+0xdc>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	e7de      	b.n	8003c34 <_malloc_r+0xa8>
 8003c76:	230c      	movs	r3, #12
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f80c 	bl	8003c98 <__malloc_unlock>
 8003c80:	e794      	b.n	8003bac <_malloc_r+0x20>
 8003c82:	6005      	str	r5, [r0, #0]
 8003c84:	e7d6      	b.n	8003c34 <_malloc_r+0xa8>
 8003c86:	bf00      	nop
 8003c88:	200006cc 	.word	0x200006cc

08003c8c <__malloc_lock>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	@ (8003c94 <__malloc_lock+0x8>)
 8003c8e:	f7ff bf01 	b.w	8003a94 <__retarget_lock_acquire_recursive>
 8003c92:	bf00      	nop
 8003c94:	200006c4 	.word	0x200006c4

08003c98 <__malloc_unlock>:
 8003c98:	4801      	ldr	r0, [pc, #4]	@ (8003ca0 <__malloc_unlock+0x8>)
 8003c9a:	f7ff befc 	b.w	8003a96 <__retarget_lock_release_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200006c4 	.word	0x200006c4

08003ca4 <__ssputs_r>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	688e      	ldr	r6, [r1, #8]
 8003caa:	461f      	mov	r7, r3
 8003cac:	42be      	cmp	r6, r7
 8003cae:	680b      	ldr	r3, [r1, #0]
 8003cb0:	4682      	mov	sl, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4690      	mov	r8, r2
 8003cb6:	d82d      	bhi.n	8003d14 <__ssputs_r+0x70>
 8003cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cc0:	d026      	beq.n	8003d10 <__ssputs_r+0x6c>
 8003cc2:	6965      	ldr	r5, [r4, #20]
 8003cc4:	6909      	ldr	r1, [r1, #16]
 8003cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cca:	eba3 0901 	sub.w	r9, r3, r1
 8003cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cd2:	1c7b      	adds	r3, r7, #1
 8003cd4:	444b      	add	r3, r9
 8003cd6:	106d      	asrs	r5, r5, #1
 8003cd8:	429d      	cmp	r5, r3
 8003cda:	bf38      	it	cc
 8003cdc:	461d      	movcc	r5, r3
 8003cde:	0553      	lsls	r3, r2, #21
 8003ce0:	d527      	bpl.n	8003d32 <__ssputs_r+0x8e>
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7ff ff52 	bl	8003b8c <_malloc_r>
 8003ce8:	4606      	mov	r6, r0
 8003cea:	b360      	cbz	r0, 8003d46 <__ssputs_r+0xa2>
 8003cec:	6921      	ldr	r1, [r4, #16]
 8003cee:	464a      	mov	r2, r9
 8003cf0:	f7ff fed2 	bl	8003a98 <memcpy>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	6126      	str	r6, [r4, #16]
 8003d02:	6165      	str	r5, [r4, #20]
 8003d04:	444e      	add	r6, r9
 8003d06:	eba5 0509 	sub.w	r5, r5, r9
 8003d0a:	6026      	str	r6, [r4, #0]
 8003d0c:	60a5      	str	r5, [r4, #8]
 8003d0e:	463e      	mov	r6, r7
 8003d10:	42be      	cmp	r6, r7
 8003d12:	d900      	bls.n	8003d16 <__ssputs_r+0x72>
 8003d14:	463e      	mov	r6, r7
 8003d16:	6820      	ldr	r0, [r4, #0]
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	f000 faa8 	bl	8004270 <memmove>
 8003d20:	68a3      	ldr	r3, [r4, #8]
 8003d22:	1b9b      	subs	r3, r3, r6
 8003d24:	60a3      	str	r3, [r4, #8]
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	4433      	add	r3, r6
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d32:	462a      	mov	r2, r5
 8003d34:	f000 fac6 	bl	80042c4 <_realloc_r>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1e0      	bne.n	8003d00 <__ssputs_r+0x5c>
 8003d3e:	6921      	ldr	r1, [r4, #16]
 8003d40:	4650      	mov	r0, sl
 8003d42:	f7ff feb7 	bl	8003ab4 <_free_r>
 8003d46:	230c      	movs	r3, #12
 8003d48:	f8ca 3000 	str.w	r3, [sl]
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	e7e9      	b.n	8003d2e <__ssputs_r+0x8a>
	...

08003d5c <_svfiprintf_r>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	4698      	mov	r8, r3
 8003d62:	898b      	ldrh	r3, [r1, #12]
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	b09d      	sub	sp, #116	@ 0x74
 8003d68:	4607      	mov	r7, r0
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	d510      	bpl.n	8003d92 <_svfiprintf_r+0x36>
 8003d70:	690b      	ldr	r3, [r1, #16]
 8003d72:	b973      	cbnz	r3, 8003d92 <_svfiprintf_r+0x36>
 8003d74:	2140      	movs	r1, #64	@ 0x40
 8003d76:	f7ff ff09 	bl	8003b8c <_malloc_r>
 8003d7a:	6028      	str	r0, [r5, #0]
 8003d7c:	6128      	str	r0, [r5, #16]
 8003d7e:	b930      	cbnz	r0, 8003d8e <_svfiprintf_r+0x32>
 8003d80:	230c      	movs	r3, #12
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	b01d      	add	sp, #116	@ 0x74
 8003d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8e:	2340      	movs	r3, #64	@ 0x40
 8003d90:	616b      	str	r3, [r5, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d96:	2320      	movs	r3, #32
 8003d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da0:	2330      	movs	r3, #48	@ 0x30
 8003da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f40 <_svfiprintf_r+0x1e4>
 8003da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003daa:	f04f 0901 	mov.w	r9, #1
 8003dae:	4623      	mov	r3, r4
 8003db0:	469a      	mov	sl, r3
 8003db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db6:	b10a      	cbz	r2, 8003dbc <_svfiprintf_r+0x60>
 8003db8:	2a25      	cmp	r2, #37	@ 0x25
 8003dba:	d1f9      	bne.n	8003db0 <_svfiprintf_r+0x54>
 8003dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc0:	d00b      	beq.n	8003dda <_svfiprintf_r+0x7e>
 8003dc2:	465b      	mov	r3, fp
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4638      	mov	r0, r7
 8003dca:	f7ff ff6b 	bl	8003ca4 <__ssputs_r>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f000 80a7 	beq.w	8003f22 <_svfiprintf_r+0x1c6>
 8003dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dd6:	445a      	add	r2, fp
 8003dd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dda:	f89a 3000 	ldrb.w	r3, [sl]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 809f 	beq.w	8003f22 <_svfiprintf_r+0x1c6>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dee:	f10a 0a01 	add.w	sl, sl, #1
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9307      	str	r3, [sp, #28]
 8003df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dfc:	4654      	mov	r4, sl
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e04:	484e      	ldr	r0, [pc, #312]	@ (8003f40 <_svfiprintf_r+0x1e4>)
 8003e06:	f7fc f9e3 	bl	80001d0 <memchr>
 8003e0a:	9a04      	ldr	r2, [sp, #16]
 8003e0c:	b9d8      	cbnz	r0, 8003e46 <_svfiprintf_r+0xea>
 8003e0e:	06d0      	lsls	r0, r2, #27
 8003e10:	bf44      	itt	mi
 8003e12:	2320      	movmi	r3, #32
 8003e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e18:	0711      	lsls	r1, r2, #28
 8003e1a:	bf44      	itt	mi
 8003e1c:	232b      	movmi	r3, #43	@ 0x2b
 8003e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e22:	f89a 3000 	ldrb.w	r3, [sl]
 8003e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e28:	d015      	beq.n	8003e56 <_svfiprintf_r+0xfa>
 8003e2a:	9a07      	ldr	r2, [sp, #28]
 8003e2c:	4654      	mov	r4, sl
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f04f 0c0a 	mov.w	ip, #10
 8003e34:	4621      	mov	r1, r4
 8003e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e3a:	3b30      	subs	r3, #48	@ 0x30
 8003e3c:	2b09      	cmp	r3, #9
 8003e3e:	d94b      	bls.n	8003ed8 <_svfiprintf_r+0x17c>
 8003e40:	b1b0      	cbz	r0, 8003e70 <_svfiprintf_r+0x114>
 8003e42:	9207      	str	r2, [sp, #28]
 8003e44:	e014      	b.n	8003e70 <_svfiprintf_r+0x114>
 8003e46:	eba0 0308 	sub.w	r3, r0, r8
 8003e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	9304      	str	r3, [sp, #16]
 8003e52:	46a2      	mov	sl, r4
 8003e54:	e7d2      	b.n	8003dfc <_svfiprintf_r+0xa0>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	1d19      	adds	r1, r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	9103      	str	r1, [sp, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfbb      	ittet	lt
 8003e62:	425b      	neglt	r3, r3
 8003e64:	f042 0202 	orrlt.w	r2, r2, #2
 8003e68:	9307      	strge	r3, [sp, #28]
 8003e6a:	9307      	strlt	r3, [sp, #28]
 8003e6c:	bfb8      	it	lt
 8003e6e:	9204      	strlt	r2, [sp, #16]
 8003e70:	7823      	ldrb	r3, [r4, #0]
 8003e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e74:	d10a      	bne.n	8003e8c <_svfiprintf_r+0x130>
 8003e76:	7863      	ldrb	r3, [r4, #1]
 8003e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e7a:	d132      	bne.n	8003ee2 <_svfiprintf_r+0x186>
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	1d1a      	adds	r2, r3, #4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	9203      	str	r2, [sp, #12]
 8003e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e88:	3402      	adds	r4, #2
 8003e8a:	9305      	str	r3, [sp, #20]
 8003e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f50 <_svfiprintf_r+0x1f4>
 8003e90:	7821      	ldrb	r1, [r4, #0]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4650      	mov	r0, sl
 8003e96:	f7fc f99b 	bl	80001d0 <memchr>
 8003e9a:	b138      	cbz	r0, 8003eac <_svfiprintf_r+0x150>
 8003e9c:	9b04      	ldr	r3, [sp, #16]
 8003e9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ea2:	2240      	movs	r2, #64	@ 0x40
 8003ea4:	4082      	lsls	r2, r0
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb0:	4824      	ldr	r0, [pc, #144]	@ (8003f44 <_svfiprintf_r+0x1e8>)
 8003eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003eb6:	2206      	movs	r2, #6
 8003eb8:	f7fc f98a 	bl	80001d0 <memchr>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d036      	beq.n	8003f2e <_svfiprintf_r+0x1d2>
 8003ec0:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <_svfiprintf_r+0x1ec>)
 8003ec2:	bb1b      	cbnz	r3, 8003f0c <_svfiprintf_r+0x1b0>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	f023 0307 	bic.w	r3, r3, #7
 8003ecc:	3308      	adds	r3, #8
 8003ece:	9303      	str	r3, [sp, #12]
 8003ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ed2:	4433      	add	r3, r6
 8003ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ed6:	e76a      	b.n	8003dae <_svfiprintf_r+0x52>
 8003ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003edc:	460c      	mov	r4, r1
 8003ede:	2001      	movs	r0, #1
 8003ee0:	e7a8      	b.n	8003e34 <_svfiprintf_r+0xd8>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	3401      	adds	r4, #1
 8003ee6:	9305      	str	r3, [sp, #20]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f04f 0c0a 	mov.w	ip, #10
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef4:	3a30      	subs	r2, #48	@ 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d903      	bls.n	8003f02 <_svfiprintf_r+0x1a6>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c6      	beq.n	8003e8c <_svfiprintf_r+0x130>
 8003efe:	9105      	str	r1, [sp, #20]
 8003f00:	e7c4      	b.n	8003e8c <_svfiprintf_r+0x130>
 8003f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f06:	4604      	mov	r4, r0
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e7f0      	b.n	8003eee <_svfiprintf_r+0x192>
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	462a      	mov	r2, r5
 8003f12:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <_svfiprintf_r+0x1f0>)
 8003f14:	a904      	add	r1, sp, #16
 8003f16:	4638      	mov	r0, r7
 8003f18:	f3af 8000 	nop.w
 8003f1c:	1c42      	adds	r2, r0, #1
 8003f1e:	4606      	mov	r6, r0
 8003f20:	d1d6      	bne.n	8003ed0 <_svfiprintf_r+0x174>
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	065b      	lsls	r3, r3, #25
 8003f26:	f53f af2d 	bmi.w	8003d84 <_svfiprintf_r+0x28>
 8003f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f2c:	e72c      	b.n	8003d88 <_svfiprintf_r+0x2c>
 8003f2e:	ab03      	add	r3, sp, #12
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	462a      	mov	r2, r5
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <_svfiprintf_r+0x1f0>)
 8003f36:	a904      	add	r1, sp, #16
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f000 f879 	bl	8004030 <_printf_i>
 8003f3e:	e7ed      	b.n	8003f1c <_svfiprintf_r+0x1c0>
 8003f40:	08004af0 	.word	0x08004af0
 8003f44:	08004afa 	.word	0x08004afa
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	08003ca5 	.word	0x08003ca5
 8003f50:	08004af6 	.word	0x08004af6

08003f54 <_printf_common>:
 8003f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f58:	4616      	mov	r6, r2
 8003f5a:	4698      	mov	r8, r3
 8003f5c:	688a      	ldr	r2, [r1, #8]
 8003f5e:	690b      	ldr	r3, [r1, #16]
 8003f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	bfb8      	it	lt
 8003f68:	4613      	movlt	r3, r2
 8003f6a:	6033      	str	r3, [r6, #0]
 8003f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f70:	4607      	mov	r7, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	b10a      	cbz	r2, 8003f7a <_printf_common+0x26>
 8003f76:	3301      	adds	r3, #1
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0699      	lsls	r1, r3, #26
 8003f7e:	bf42      	ittt	mi
 8003f80:	6833      	ldrmi	r3, [r6, #0]
 8003f82:	3302      	addmi	r3, #2
 8003f84:	6033      	strmi	r3, [r6, #0]
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	f015 0506 	ands.w	r5, r5, #6
 8003f8c:	d106      	bne.n	8003f9c <_printf_common+0x48>
 8003f8e:	f104 0a19 	add.w	sl, r4, #25
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	6832      	ldr	r2, [r6, #0]
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	dc26      	bgt.n	8003fea <_printf_common+0x96>
 8003f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	3b00      	subs	r3, #0
 8003fa4:	bf18      	it	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	0692      	lsls	r2, r2, #26
 8003faa:	d42b      	bmi.n	8004004 <_printf_common+0xb0>
 8003fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47c8      	blx	r9
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d01e      	beq.n	8003ff8 <_printf_common+0xa4>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	f003 0306 	and.w	r3, r3, #6
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf02      	ittt	eq
 8003fc6:	68e5      	ldreq	r5, [r4, #12]
 8003fc8:	6833      	ldreq	r3, [r6, #0]
 8003fca:	1aed      	subeq	r5, r5, r3
 8003fcc:	68a3      	ldr	r3, [r4, #8]
 8003fce:	bf0c      	ite	eq
 8003fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fd4:	2500      	movne	r5, #0
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	bfc4      	itt	gt
 8003fda:	1a9b      	subgt	r3, r3, r2
 8003fdc:	18ed      	addgt	r5, r5, r3
 8003fde:	2600      	movs	r6, #0
 8003fe0:	341a      	adds	r4, #26
 8003fe2:	42b5      	cmp	r5, r6
 8003fe4:	d11a      	bne.n	800401c <_printf_common+0xc8>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	e008      	b.n	8003ffc <_printf_common+0xa8>
 8003fea:	2301      	movs	r3, #1
 8003fec:	4652      	mov	r2, sl
 8003fee:	4641      	mov	r1, r8
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	47c8      	blx	r9
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d103      	bne.n	8004000 <_printf_common+0xac>
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	3501      	adds	r5, #1
 8004002:	e7c6      	b.n	8003f92 <_printf_common+0x3e>
 8004004:	18e1      	adds	r1, r4, r3
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	2030      	movs	r0, #48	@ 0x30
 800400a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800400e:	4422      	add	r2, r4
 8004010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004018:	3302      	adds	r3, #2
 800401a:	e7c7      	b.n	8003fac <_printf_common+0x58>
 800401c:	2301      	movs	r3, #1
 800401e:	4622      	mov	r2, r4
 8004020:	4641      	mov	r1, r8
 8004022:	4638      	mov	r0, r7
 8004024:	47c8      	blx	r9
 8004026:	3001      	adds	r0, #1
 8004028:	d0e6      	beq.n	8003ff8 <_printf_common+0xa4>
 800402a:	3601      	adds	r6, #1
 800402c:	e7d9      	b.n	8003fe2 <_printf_common+0x8e>
	...

08004030 <_printf_i>:
 8004030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	7e0f      	ldrb	r7, [r1, #24]
 8004036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004038:	2f78      	cmp	r7, #120	@ 0x78
 800403a:	4691      	mov	r9, r2
 800403c:	4680      	mov	r8, r0
 800403e:	460c      	mov	r4, r1
 8004040:	469a      	mov	sl, r3
 8004042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004046:	d807      	bhi.n	8004058 <_printf_i+0x28>
 8004048:	2f62      	cmp	r7, #98	@ 0x62
 800404a:	d80a      	bhi.n	8004062 <_printf_i+0x32>
 800404c:	2f00      	cmp	r7, #0
 800404e:	f000 80d2 	beq.w	80041f6 <_printf_i+0x1c6>
 8004052:	2f58      	cmp	r7, #88	@ 0x58
 8004054:	f000 80b9 	beq.w	80041ca <_printf_i+0x19a>
 8004058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800405c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004060:	e03a      	b.n	80040d8 <_printf_i+0xa8>
 8004062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004066:	2b15      	cmp	r3, #21
 8004068:	d8f6      	bhi.n	8004058 <_printf_i+0x28>
 800406a:	a101      	add	r1, pc, #4	@ (adr r1, 8004070 <_printf_i+0x40>)
 800406c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004070:	080040c9 	.word	0x080040c9
 8004074:	080040dd 	.word	0x080040dd
 8004078:	08004059 	.word	0x08004059
 800407c:	08004059 	.word	0x08004059
 8004080:	08004059 	.word	0x08004059
 8004084:	08004059 	.word	0x08004059
 8004088:	080040dd 	.word	0x080040dd
 800408c:	08004059 	.word	0x08004059
 8004090:	08004059 	.word	0x08004059
 8004094:	08004059 	.word	0x08004059
 8004098:	08004059 	.word	0x08004059
 800409c:	080041dd 	.word	0x080041dd
 80040a0:	08004107 	.word	0x08004107
 80040a4:	08004197 	.word	0x08004197
 80040a8:	08004059 	.word	0x08004059
 80040ac:	08004059 	.word	0x08004059
 80040b0:	080041ff 	.word	0x080041ff
 80040b4:	08004059 	.word	0x08004059
 80040b8:	08004107 	.word	0x08004107
 80040bc:	08004059 	.word	0x08004059
 80040c0:	08004059 	.word	0x08004059
 80040c4:	0800419f 	.word	0x0800419f
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6032      	str	r2, [r6, #0]
 80040d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040d8:	2301      	movs	r3, #1
 80040da:	e09d      	b.n	8004218 <_printf_i+0x1e8>
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	6031      	str	r1, [r6, #0]
 80040e4:	0606      	lsls	r6, r0, #24
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0xbc>
 80040e8:	681d      	ldr	r5, [r3, #0]
 80040ea:	e003      	b.n	80040f4 <_printf_i+0xc4>
 80040ec:	0645      	lsls	r5, r0, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0xb8>
 80040f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040f4:	2d00      	cmp	r5, #0
 80040f6:	da03      	bge.n	8004100 <_printf_i+0xd0>
 80040f8:	232d      	movs	r3, #45	@ 0x2d
 80040fa:	426d      	negs	r5, r5
 80040fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004100:	4859      	ldr	r0, [pc, #356]	@ (8004268 <_printf_i+0x238>)
 8004102:	230a      	movs	r3, #10
 8004104:	e011      	b.n	800412a <_printf_i+0xfa>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	0608      	lsls	r0, r1, #24
 800410c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004110:	d402      	bmi.n	8004118 <_printf_i+0xe8>
 8004112:	0649      	lsls	r1, r1, #25
 8004114:	bf48      	it	mi
 8004116:	b2ad      	uxthmi	r5, r5
 8004118:	2f6f      	cmp	r7, #111	@ 0x6f
 800411a:	4853      	ldr	r0, [pc, #332]	@ (8004268 <_printf_i+0x238>)
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	bf14      	ite	ne
 8004120:	230a      	movne	r3, #10
 8004122:	2308      	moveq	r3, #8
 8004124:	2100      	movs	r1, #0
 8004126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800412a:	6866      	ldr	r6, [r4, #4]
 800412c:	60a6      	str	r6, [r4, #8]
 800412e:	2e00      	cmp	r6, #0
 8004130:	bfa2      	ittt	ge
 8004132:	6821      	ldrge	r1, [r4, #0]
 8004134:	f021 0104 	bicge.w	r1, r1, #4
 8004138:	6021      	strge	r1, [r4, #0]
 800413a:	b90d      	cbnz	r5, 8004140 <_printf_i+0x110>
 800413c:	2e00      	cmp	r6, #0
 800413e:	d04b      	beq.n	80041d8 <_printf_i+0x1a8>
 8004140:	4616      	mov	r6, r2
 8004142:	fbb5 f1f3 	udiv	r1, r5, r3
 8004146:	fb03 5711 	mls	r7, r3, r1, r5
 800414a:	5dc7      	ldrb	r7, [r0, r7]
 800414c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004150:	462f      	mov	r7, r5
 8004152:	42bb      	cmp	r3, r7
 8004154:	460d      	mov	r5, r1
 8004156:	d9f4      	bls.n	8004142 <_printf_i+0x112>
 8004158:	2b08      	cmp	r3, #8
 800415a:	d10b      	bne.n	8004174 <_printf_i+0x144>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	07df      	lsls	r7, r3, #31
 8004160:	d508      	bpl.n	8004174 <_printf_i+0x144>
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	6861      	ldr	r1, [r4, #4]
 8004166:	4299      	cmp	r1, r3
 8004168:	bfde      	ittt	le
 800416a:	2330      	movle	r3, #48	@ 0x30
 800416c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004174:	1b92      	subs	r2, r2, r6
 8004176:	6122      	str	r2, [r4, #16]
 8004178:	f8cd a000 	str.w	sl, [sp]
 800417c:	464b      	mov	r3, r9
 800417e:	aa03      	add	r2, sp, #12
 8004180:	4621      	mov	r1, r4
 8004182:	4640      	mov	r0, r8
 8004184:	f7ff fee6 	bl	8003f54 <_printf_common>
 8004188:	3001      	adds	r0, #1
 800418a:	d14a      	bne.n	8004222 <_printf_i+0x1f2>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	b004      	add	sp, #16
 8004192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f043 0320 	orr.w	r3, r3, #32
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	4833      	ldr	r0, [pc, #204]	@ (800426c <_printf_i+0x23c>)
 80041a0:	2778      	movs	r7, #120	@ 0x78
 80041a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	6831      	ldr	r1, [r6, #0]
 80041aa:	061f      	lsls	r7, r3, #24
 80041ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80041b0:	d402      	bmi.n	80041b8 <_printf_i+0x188>
 80041b2:	065f      	lsls	r7, r3, #25
 80041b4:	bf48      	it	mi
 80041b6:	b2ad      	uxthmi	r5, r5
 80041b8:	6031      	str	r1, [r6, #0]
 80041ba:	07d9      	lsls	r1, r3, #31
 80041bc:	bf44      	itt	mi
 80041be:	f043 0320 	orrmi.w	r3, r3, #32
 80041c2:	6023      	strmi	r3, [r4, #0]
 80041c4:	b11d      	cbz	r5, 80041ce <_printf_i+0x19e>
 80041c6:	2310      	movs	r3, #16
 80041c8:	e7ac      	b.n	8004124 <_printf_i+0xf4>
 80041ca:	4827      	ldr	r0, [pc, #156]	@ (8004268 <_printf_i+0x238>)
 80041cc:	e7e9      	b.n	80041a2 <_printf_i+0x172>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f023 0320 	bic.w	r3, r3, #32
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	e7f6      	b.n	80041c6 <_printf_i+0x196>
 80041d8:	4616      	mov	r6, r2
 80041da:	e7bd      	b.n	8004158 <_printf_i+0x128>
 80041dc:	6833      	ldr	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	6961      	ldr	r1, [r4, #20]
 80041e2:	1d18      	adds	r0, r3, #4
 80041e4:	6030      	str	r0, [r6, #0]
 80041e6:	062e      	lsls	r6, r5, #24
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0x1c0>
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0x1c6>
 80041f0:	0668      	lsls	r0, r5, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0x1bc>
 80041f4:	8019      	strh	r1, [r3, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	4616      	mov	r6, r2
 80041fc:	e7bc      	b.n	8004178 <_printf_i+0x148>
 80041fe:	6833      	ldr	r3, [r6, #0]
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	6032      	str	r2, [r6, #0]
 8004204:	681e      	ldr	r6, [r3, #0]
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	2100      	movs	r1, #0
 800420a:	4630      	mov	r0, r6
 800420c:	f7fb ffe0 	bl	80001d0 <memchr>
 8004210:	b108      	cbz	r0, 8004216 <_printf_i+0x1e6>
 8004212:	1b80      	subs	r0, r0, r6
 8004214:	6060      	str	r0, [r4, #4]
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	2300      	movs	r3, #0
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004220:	e7aa      	b.n	8004178 <_printf_i+0x148>
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	4632      	mov	r2, r6
 8004226:	4649      	mov	r1, r9
 8004228:	4640      	mov	r0, r8
 800422a:	47d0      	blx	sl
 800422c:	3001      	adds	r0, #1
 800422e:	d0ad      	beq.n	800418c <_printf_i+0x15c>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	079b      	lsls	r3, r3, #30
 8004234:	d413      	bmi.n	800425e <_printf_i+0x22e>
 8004236:	68e0      	ldr	r0, [r4, #12]
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	4298      	cmp	r0, r3
 800423c:	bfb8      	it	lt
 800423e:	4618      	movlt	r0, r3
 8004240:	e7a6      	b.n	8004190 <_printf_i+0x160>
 8004242:	2301      	movs	r3, #1
 8004244:	4632      	mov	r2, r6
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	47d0      	blx	sl
 800424c:	3001      	adds	r0, #1
 800424e:	d09d      	beq.n	800418c <_printf_i+0x15c>
 8004250:	3501      	adds	r5, #1
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	9903      	ldr	r1, [sp, #12]
 8004256:	1a5b      	subs	r3, r3, r1
 8004258:	42ab      	cmp	r3, r5
 800425a:	dcf2      	bgt.n	8004242 <_printf_i+0x212>
 800425c:	e7eb      	b.n	8004236 <_printf_i+0x206>
 800425e:	2500      	movs	r5, #0
 8004260:	f104 0619 	add.w	r6, r4, #25
 8004264:	e7f5      	b.n	8004252 <_printf_i+0x222>
 8004266:	bf00      	nop
 8004268:	08004b01 	.word	0x08004b01
 800426c:	08004b12 	.word	0x08004b12

08004270 <memmove>:
 8004270:	4288      	cmp	r0, r1
 8004272:	b510      	push	{r4, lr}
 8004274:	eb01 0402 	add.w	r4, r1, r2
 8004278:	d902      	bls.n	8004280 <memmove+0x10>
 800427a:	4284      	cmp	r4, r0
 800427c:	4623      	mov	r3, r4
 800427e:	d807      	bhi.n	8004290 <memmove+0x20>
 8004280:	1e43      	subs	r3, r0, #1
 8004282:	42a1      	cmp	r1, r4
 8004284:	d008      	beq.n	8004298 <memmove+0x28>
 8004286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800428a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800428e:	e7f8      	b.n	8004282 <memmove+0x12>
 8004290:	4402      	add	r2, r0
 8004292:	4601      	mov	r1, r0
 8004294:	428a      	cmp	r2, r1
 8004296:	d100      	bne.n	800429a <memmove+0x2a>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800429e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042a2:	e7f7      	b.n	8004294 <memmove+0x24>

080042a4 <_sbrk_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4d06      	ldr	r5, [pc, #24]	@ (80042c0 <_sbrk_r+0x1c>)
 80042a8:	2300      	movs	r3, #0
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	f7fc fd7e 	bl	8000db0 <_sbrk>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_sbrk_r+0x1a>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_sbrk_r+0x1a>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	200006c0 	.word	0x200006c0

080042c4 <_realloc_r>:
 80042c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c8:	4680      	mov	r8, r0
 80042ca:	4615      	mov	r5, r2
 80042cc:	460c      	mov	r4, r1
 80042ce:	b921      	cbnz	r1, 80042da <_realloc_r+0x16>
 80042d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042d4:	4611      	mov	r1, r2
 80042d6:	f7ff bc59 	b.w	8003b8c <_malloc_r>
 80042da:	b92a      	cbnz	r2, 80042e8 <_realloc_r+0x24>
 80042dc:	f7ff fbea 	bl	8003ab4 <_free_r>
 80042e0:	2400      	movs	r4, #0
 80042e2:	4620      	mov	r0, r4
 80042e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e8:	f000 f81a 	bl	8004320 <_malloc_usable_size_r>
 80042ec:	4285      	cmp	r5, r0
 80042ee:	4606      	mov	r6, r0
 80042f0:	d802      	bhi.n	80042f8 <_realloc_r+0x34>
 80042f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042f6:	d8f4      	bhi.n	80042e2 <_realloc_r+0x1e>
 80042f8:	4629      	mov	r1, r5
 80042fa:	4640      	mov	r0, r8
 80042fc:	f7ff fc46 	bl	8003b8c <_malloc_r>
 8004300:	4607      	mov	r7, r0
 8004302:	2800      	cmp	r0, #0
 8004304:	d0ec      	beq.n	80042e0 <_realloc_r+0x1c>
 8004306:	42b5      	cmp	r5, r6
 8004308:	462a      	mov	r2, r5
 800430a:	4621      	mov	r1, r4
 800430c:	bf28      	it	cs
 800430e:	4632      	movcs	r2, r6
 8004310:	f7ff fbc2 	bl	8003a98 <memcpy>
 8004314:	4621      	mov	r1, r4
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff fbcc 	bl	8003ab4 <_free_r>
 800431c:	463c      	mov	r4, r7
 800431e:	e7e0      	b.n	80042e2 <_realloc_r+0x1e>

08004320 <_malloc_usable_size_r>:
 8004320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004324:	1f18      	subs	r0, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	bfbc      	itt	lt
 800432a:	580b      	ldrlt	r3, [r1, r0]
 800432c:	18c0      	addlt	r0, r0, r3
 800432e:	4770      	bx	lr

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
